name: Gemini Code Review

on:
  push:
    branches: [main]
    paths:
      - 'src/**'
  pull_request:
    types: [opened]

jobs:
  code-review:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Node
        uses: actions/setup-node@v3

      - name: Install GoogleGenerativeAI
        run: |
          npm install @google/generative-ai

      # PR 이벤트에서의 변경사항 처리
      - name: Get git diff for PR
        if: github.event_name == 'pull_request'
        run: |
          git fetch origin "${{ github.event.pull_request.base.ref }}"
          git fetch origin "${{ github.event.pull_request.head.ref }}"
          git diff --unified=0 "origin/${{ github.event.pull_request.base.ref }}" > "diff.txt"
          echo "EVENT_TYPE=pull_request" >> $GITHUB_ENV

      # Push 이벤트에서의 변경사항 처리
      - name: Get git diff for Push
        if: github.event_name == 'push'
        run: |
          git diff --unified=0 HEAD^ HEAD > "diff.txt"
          echo "EVENT_TYPE=push" >> $GITHUB_ENV

      # Gemini를 사용한 코드 분석
      - name: Run Gemini-1.5-flash
        id: gemini_review
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require("fs");
            const diff_output = fs.readFileSync("diff.txt",'utf8');

            const { GoogleGenerativeAI } = require("@google/generative-ai");
            const genAI = new GoogleGenerativeAI("${{ secrets.GEMINI_API_KEY }}");
            const model = genAI.getGenerativeModel({ model: "gemini-1.5-flash"});


            let prompt = `Explain in Korean. As a highly experienced software engineer,
            your task is to conduct a thorough code review based on the provided git diff.
            Your analysis should identify areas for improvement in the changed code,
            focusing on logic, potential bugs, efficiency, security, and readability.
            You must output your review comments in a JSON array format,
            ensuring each comment includes the precise line number of the issue.
            Do not include any introductory or concluding remarks,
            or any explanations outside of the JSON structure.
            
            The output format must strictly adhere to the following JSON array:
            \`\`\`json
            [{"path": "{filepath}", "line": {line_number}, "text": "{review_comment}", "side": "RIGHT"}]
            \`\`\`
            
            **Crucially, exclude any comments related to code comments.**
            Your feedback should be solely directed at the functional and structural aspects
            of the code modifications.
            
            To pinpoint the correct line number for each comment, carefully examine
            the '@@ -old_start,old_lines +new_start,new_lines @@' headers within the git diff.
            The 'line' field in your JSON output should represent the actual line number
            in the *new* file where the issue occurs, based on the added lines ('+')
            within these '@@' blocks.
            
            Analyze the code changes provided within the <git diff> tags below,
            and generate your review comments strictly in the specified JSON format.
            
            <git diff>${diff_output}</git diff>`;

            const result = await model.generateContent(prompt);
            const response = await result.response;
            const text = response.text();

            fs.writeFileSync('review_result.txt', text);
            console.log('Review results saved!');

      # PR 이벤트: 라인별 리뷰 코멘트 추가
      - name: Format and add PR review comments
        if: env.EVENT_TYPE == 'pull_request'
        id: store
        run: |
          COMMENT=$(sed '/^```/d' review_result.txt | jq -c .)
          echo "comment=$COMMENT" >> $GITHUB_OUTPUT

      - name: Add Pull Request Review Comment
        if: env.EVENT_TYPE == 'pull_request'
        uses: nbaztec/add-pr-review-comment@v1.0.7
        with:
          comments: ${{ steps.store.outputs.comment }}
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          repo-token-user-login: 'github-actions[bot]'
          allow-repeats: false

      # Push 이벤트: 액션 로그에 리뷰 결과 출력 및 아티팩트 업로드
      - name: Display review results in workflow log
        if: env.EVENT_TYPE == 'push'
        run: |
          echo "===== Gemini Code Review Results ====="
          cat review_result.txt
          echo "======================================"

      - name: Upload review results as artifact
        if: env.EVENT_TYPE == 'push'
        uses: actions/upload-artifact@v4
        with:
          name: gemini-code-review
          path: review_result.txt