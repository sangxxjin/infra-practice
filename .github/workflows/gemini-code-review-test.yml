name: Gemini AI Code Review

on:
  workflow_dispatch:
  pull_request:
    types: [ opened, synchronize ]

jobs:
  code-review:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Node
        uses: actions/setup-node@v3

      - name: Install GoogleGenerativeAI
        run: |
          npm install @google/generative-ai # Gemini API 클라이언트 설치

      - name: Get git diff
        run: |
          if [ "${{ github.event_name }}" == "pull_request" ]; then
          BASE_COMMIT="${{ github.event.before }}" 
          HEAD_COMMIT="${{ github.sha }}"
          git diff --unified=0 $BASE_COMMIT $HEAD_COMMIT > diff.txt
          else
          git diff --unified=0 HEAD^ HEAD > diff.txt  # 마지막 커밋 기준 변경사항 저장
          fi

      - name: Run Gemini-1.5-flash
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require("fs");
            const diff_output = fs.readFileSync("diff.txt", "utf8");
            
            const { GoogleGenerativeAI } = require("@google/generative-ai");
            const genAI = new GoogleGenerativeAI("${{ secrets.GEMINI_API_KEY }}");
            const model = genAI.getGenerativeModel({ model: "gemini-1.5-flash" });
            
            // 한국어로 코드 리뷰 요청 및 특정 JSON 형식으로 응답 요청
            const prompt = `Explain in korean. You are a senior software engineer and need to perform a code review based on the results of a given git diff.
            Review the changed code from different perspectives and let us know if there are any changes that need to be made.
            If you see any code that needs to be fixed in the result of the git diff, you need to calculate the exact line number by referring to the "@@ -0,0 +0,0 @@" part.
            The output format is [{"path":"{ filepath }", "line": { line }, "text": { review comment }, "side": "RIGHT"}] format must be respected.
            If the line number is not available or the code was entirely deleted, skip that file from the output.
            Only include comments for lines with valid, non-zero numbers that exist in the PR diff.
            If you detect that a code block was removed and then re-added (especially with the same content), please comment on whether that makes sense or seems unnecessary.


            <git diff>${diff_output}</git diff>`;
            
            async function run() {
              const result = await model.generateContent(prompt);
              const response = await result.response;
              const text = response.text();
              fs.writeFileSync("review_result.txt", text);
              console.log("Review results saved!");
            }
            
            return run();

      - name: Format PR review comments
        if: github.event_name == 'pull_request'
        id: store
        run: |
          # Markdown 코드 블록 제거 후 JSON 형식으로 변환
          COMMENT=$(sed '/^```/d' review_result.txt | jq -c .)
          echo "comment=$COMMENT" >> $GITHUB_OUTPUT # 출력 변수에 저장

      - name: Add Pull Request Review Comment
        if: github.event_name == 'pull_request'
        uses: nbaztec/add-pr-review-comment@v1.0.7
        with:
          comments: ${{ steps.store.outputs.comment }}
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          repo-token-user-login: 'github-actions[bot]'
          allow-repeats: false

      - name: Debug show diff
        run: |
          echo "==== diff.txt ===="
          cat diff.txt
          echo "=================="