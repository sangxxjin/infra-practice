name: Gemini AI Code Review # 워크플로우의 이름 정의

on: # 워크플로우 트리거 정의
  workflow_dispatch: # GitHub 웹 UI에서 수동으로 워크플로우 실행 가능
  pull_request: # PR이 열리거나 업데이트될 때 실행
    types: [ opened, synchronize ]

jobs:
  code-review: # 작업 이름 정의
    runs-on: ubuntu-latest # 작업이 실행될 환경 지정
    permissions: # 필요한 권한 설정
      contents: read # 저장소 내용 읽기 권한
      pull-requests: write # PR 댓글 작성 권한
    steps:
      - name: Checkout repository # 저장소 체크아웃 단계
        uses: actions/checkout@v3 # GitHub 제공 액션 사용
        with:
          fetch-depth: 0 # 전체 히스토리 가져오기 (diff 계산을 위해 필요)

      - name: Set up Node # Node.js 환경 설정 단계
        uses: actions/setup-node@v3 # Node.js 설치 액션

      - name: Install GoogleGenerativeAI # Gemini API 라이브러리 설치 단계
        run: | # Gemini API 클라이언트 설치
          npm install @google/generative-ai

      - name: Get git diff # 코드 변경사항 추출 단계
        run: | # GitHub에서 base와 head 정보를 가져옴
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            BASE_COMMIT="${{ github.event.pull_request.base.sha }}"
            HEAD_COMMIT="${{ github.event.pull_request.head.sha }}"
            git diff --unified=0 $BASE_COMMIT $HEAD_COMMIT > diff.txt
          else
            git diff --unified=0 HEAD^ HEAD > diff.txt
          fi

      - name: Run Gemini-1.5-flash # Gemini AI로 코드 리뷰 수행 단계
        uses: actions/github-script@v7 # JavaScript 실행 액션
        with:
          script: |
            const fs = require("fs");
            const diff_output = fs.readFileSync("diff.txt", "utf8");

            const { GoogleGenerativeAI } = require("@google/generative-ai");
            const genAI = new GoogleGenerativeAI("${{ secrets.GEMINI_API_KEY }}");
            const model = genAI.getGenerativeModel({ model: "gemini-1.5-flash" });

            // JSON 스키마 정의
            const schema = `
            {
              "type": "array",
              "items": {
                "type":"object",
                "properties": {
                  "path": {
                    "type":"string",
                    "description": "파일 경로"
                  },
                  "line": {
                    "type":"integer",
                    "description": "코드 라인 번호"
                  },
                  "diff_hunk": {
                    "type":"string",
                    "description": "변경된 코드 컨텍스트"
                  },
                  "body": {
                    "type":"string",
                    "description": "리뷰 코멘트"
                  },
                  "commit_id": {
                    "type":"string",
                    "description": "커밋 ID"
                  }
                },
                "required": ["path", "line", "diff_hunk", "body", "commit_id"]
              }
            }
            `;

            // 한국어로 코드 리뷰 요청 및 특정 JSON 형식으로 응답 요청
            const prompt = `Explain in korean. You are a senior software engineer and need to perform a code review based on the results of a given git diff.
            Review the changed code from different perspectives and let us know if there are any changes that need to be made.

            For each issue you find, you must include:
            1. The exact file path as shown in the diff
            2. The exact line number calculated from the diff hunk header
            3. The diff_hunk which is the patch/context of the code you're commenting on

            The output format MUST be a valid JSON array: [{"path":"{ filepath }", "line": { line }, "diff_hunk": "{ the code context from diff }", "body": "{ review comment }", "commit_id": "${{ github.event.pull_request.head.sha }}"}]. All 'line' values must be valid integers.

            Only include files and lines that actually exist in the diff. Avoid commenting on files with non-ASCII characters in their paths.
            If you detect that a code block was removed and then re-added, please comment on whether that makes sense or seems unnecessary.

            <git diff>${diff_output}</git diff>`;

            async function run() {
              const result = await model.generateContent(prompt);
              const response = await result.response;
              const text = response.text();
              fs.writeFileSync("review_result.txt", text);
              console.log("Review results saved!");
            }

            return run();

      - name: Format PR review comments # 리뷰 결과를 PR 코멘트 형식으로 변환 단계
        if: github.event_name == 'pull_request' # PR인 경우에만 실행
        id: store # 다음 단계에서 참조할 ID
        run: | # Markdown 코드 블록 제거 후 JSON 형식으로 변환
          echo "===== Raw Gemini Output ====="
          cat review_result.txt
          echo "==========================="
          RAW_COMMENT=$(cat review_result.txt)
          # Markdown 코드 블록 제거 및 JSON 주변 공백/개행 문자 제거
          CLEANED_COMMENT=$(echo "$RAW_COMMENT" | sed -e 's/^```json//' -e 's/```$//' -e 's/^```javascript//' -e 's/```$//' -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')
          echo "===== Cleaned Gemini Output ====="
          echo "$CLEANED_COMMENT"
          echo "==============================="
          # body 필드 내의 백슬래시 이스케이프 처리 및 유효하지 않은 문자 제거 후 JSON 파싱 시도
          ESCAPED_COMMENT=$(echo "$CLEANED_COMMENT" | jq -c '. | map(.body = gsub("\\\\", "\\\\\\\\"))' || echo "[]")
          COMMENT=$(echo "$ESCAPED_COMMENT" | sed 's/[^[:print:]]//g' | jq -c . || echo "[]")
          echo "comment=$COMMENT" >> $GITHUB_OUTPUT

      - name: Add Pull Request Review Comment # PR에 코드 리뷰 코멘트 추가 단계
        if: github.event_name == 'pull_request' # PR인 경우에만 실행
        uses: actions/github-script@v7 # 코드 리뷰 코멘트 추가 액션
        env:
          REVIEW_COMMENTS: ${{ steps.store.outputs.comment }}
        with:
          script: |
            const comments = JSON.parse(process.env.REVIEW_COMMENTS || "[]");
            const pull_number = context.payload.pull_request.number;
            const owner = context.repo.owner;
            const repo = context.repo.repo;

            for (const comment of comments) {
              try {
                await github.rest.pulls.createReviewComment({
                  owner,
                  repo,
                  pull_number,
                  body: comment.body,
                  commit_id: comment.commit_id,
                  path: comment.path,
                  line: comment.line,
                  side: "RIGHT"
                });
              } catch (error) {
                console.error(`❌ Failed to comment on ${comment.path}:${comment.line}`);
                console.error(error.message);
              }
            }

      - name: Debug show diff
        run: |
          echo "==== diff.txt ===="
          cat diff.txt
          echo "=================="

      - name: Print Gemini raw output
        run: |
          echo "===== Gemini Output ====="
          cat review_result.txt
          echo "========================="
