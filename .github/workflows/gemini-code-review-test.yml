name: Gemini Code Review

on:
  push:
    branches: [main, dev-main, feat-post-id, feat-search, feat-user-block, feat-post-jwt]
    paths:
      - 'src/**'
  pull_request:
    types: [opened, synchronize]

jobs:
  gemini-review:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Node
        uses: actions/setup-node@v4

      - name: Install dependencies
        run: |
          npm install @google/generative-ai

      - name: Generate git diff (Pull Request)
        if: github.event_name == 'pull_request'
        run: |
          git fetch origin ${{ github.event.pull_request.base.ref }}
          git diff --unified=0 origin/${{ github.event.pull_request.base.ref }} > diff.txt
          echo "EVENT_TYPE=pull_request" >> $GITHUB_ENV

      - name: Generate git diff (Push)
        if: github.event_name == 'push'
        run: |
          git diff --unified=0 HEAD^ HEAD > diff.txt
          echo "EVENT_TYPE=push" >> $GITHUB_ENV

      - name: Run Gemini-1.5-flash Code Review
        id: gemini_review
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const diff_output = fs.readFileSync('diff.txt', 'utf8');

            const { GoogleGenerativeAI } = require('@google/generative-ai');
            const genAI = new GoogleGenerativeAI('${{ secrets.GEMINI_API_KEY }}');
            const model = genAI.getGenerativeModel({ model: 'gemini-1.5-flash' });

            let prompt;
            if (process.env.EVENT_TYPE === 'pull_request') {
              prompt = `Explain in Korean. You're a senior engineer doing a PR code review. Provide line-specific actionable comments in JSON format: [{"path":"filepath","line":linenumber,"text":"comment","side":"RIGHT"}]. Do not include any other explanations or markdown. <git diff>${diff_output}</git diff>`;
            } else {
              prompt = `Explain in Korean. You're a senior engineer reviewing code. Summarize in JSON format: [{"path":"filepath","text":"summary"}]. Do not include any other explanations or markdown. <git diff>${diff_output}</git diff>`;
            }

            try {
              const result = await model.generateContent(prompt);
              const response = await result.response;
              const text = response.text();

              // 응답이 JSON 형식인지 간단하게 확인 (더 엄격한 검증 필요할 수 있음)
              if (text.startsWith('[') && text.endsWith(']')) {
                fs.writeFileSync('review_result.txt', text);
                console.log('Review results saved as JSON.');
              } else {
                console.error('Error: Gemini response is not in the expected JSON format:', text);
                fs.writeFileSync('review_result.txt', '[]'); // 빈 JSON 배열 저장
              }
            } catch (error) {
              console.error('Error generating or saving review:', error);
              fs.writeFileSync('review_result.txt', '[]'); // 오류 발생 시 빈 JSON 배열 저장
            }

      - name: Add Pull Request Comments
        if: env.EVENT_TYPE == 'pull_request'
        run: |
          jq '.' review_result.txt > formatted_review.json || true
          if jq -e . >/dev/null 2>&1 < formatted_review.json; then
            echo "comments=$(cat formatted_review.json)" >> $GITHUB_ENV
          else
            echo "Invalid JSON, setting empty array"
            echo "comments=[]" >> $GITHUB_ENV
          fi

      - name: Post PR review comments
        if: env.EVENT_TYPE == 'pull_request'
        uses: nbaztec/add-pr-review-comment@v1.0.7
        with:
          comments: ${{ env.comments }}
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          allow-repeats: false

      - name: Display review results
        if: env.EVENT_TYPE == 'push'
        run: |
          echo "Gemini Code Review Summary:"
          cat review_result.txt

      - name: Upload review results
        if: env.EVENT_TYPE == 'push'
        uses: actions/upload-artifact@v4
        with:
          name: gemini-code-review
          path: review_result.txt